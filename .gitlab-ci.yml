#################################################################################################################
#                                               LES STAGES                                                      #
#################################################################################################################

stages:
    - quality
    #- test
    - build
    #- deploy
    #- performance

#################################################################################################################
#                                                  BUILD                                                        #
#################################################################################################################
services : 
    - docker:dind
kafka_build :
    stage: build
    image: docker:latest
    script:
        - cd Kafka
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -f Dockerfile_start_kafka -t $CI_REGISTRY_IMAGE/ubuntu_with_kafka_minicube  .
        - docker push $CI_REGISTRY_IMAGE/ubuntu_with_kafka_minicube   
    only:
        changes:
            - Kafka/**/*
        refs:
            - minicube
        except:
            - master
        

services: 
    - docker:dind
Generator_build :
    stage: build
    when: on_success
    image: docker:latest
    script:
        - cd Generator
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -f Dockerfile_generator -t $CI_REGISTRY_IMAGE/ubuntu_with_generator_minicube  .
        - docker push $CI_REGISTRY_IMAGE/ubuntu_with_generator_minicube
    only:
        changes:
            - Generator/**/*
        refs:
            - minicube
        except:
            - master
        

services: 
    - docker:dind
logger_build :
    stage: build
    image: docker:latest
    allow_failure : true
    script:
        - cd Logger
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -f Dockerfile_logger -t $CI_REGISTRY_IMAGE/python_with_logger_minicube .
        - docker push $CI_REGISTRY_IMAGE/python_with_logger_minicube
    only:
        changes :
            - Logger/**/*
        refs:
            - minicube
        except:
            - master
services: 
    - docker:dind
collector_build :
    stage: build
    image: docker:latest
    script:
        - cd Collector
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -f Dockerfile_collector -t $CI_REGISTRY_IMAGE/python_with_collector_minicube .
        - docker push $CI_REGISTRY_IMAGE/python_with_collector_minicube
    only:
        changes :
            - Collector/**/*
        refs:
            - minicube
        except:
            - master
    when: on_success 

services: 
    - docker:dind
estimator_build :
    stage: build
    image: docker:latest
    script:
        - cd Estimator
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -f Dockerfile_estimator -t $CI_REGISTRY_IMAGE/python_with_estimator_minicube .
        - docker push $CI_REGISTRY_IMAGE/python_with_estimator_minicube
    only:
        changes :
            - Estimator/**/*
        refs:
            - minicube
        except:
            - master
    when : on_success

services: 
    - docker:dind
predictor_build :
    stage: build
    image: docker:latest
    allow_failure : true
    script:
        - cd Predictor
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -f Dockerfile_predictor -t $CI_REGISTRY_IMAGE/python_with_predictor_minicube .
        - docker push $CI_REGISTRY_IMAGE/python_with_predictor_minicube
    only:
        changes:
            - Predictor/**/*
        refs:
            - minicube
        except:
            - master
    
services: 
    - docker:dind
learner_build :
    stage: build
    image: docker:latest
    allow_failure : true
    script:
        - cd Learner
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -f Dockerfile_learner -t $CI_REGISTRY_IMAGE/python_with_learner_minicube .
        - docker push $CI_REGISTRY_IMAGE/python_with_learner_minicube
    only:
        changes:
            - Learner/**/*
        refs:
            - minicube
        except:
            - master
            
services: 
    - docker:dind
monitor_image_job :
    stage: build
    image: docker:latest
    allow_failure : true
    script:
        - cd Monitor
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -f Dockerfile_monitor -t $CI_REGISTRY_IMAGE/python_with_monitor_minicube .
        - docker push $CI_REGISTRY_IMAGE/python_with_monitor_minicube
    only:
        changes:
            - Monitor/**/*
        refs:
            - minicube
        except:
            - master

services: 
    - docker:dind
dashboard_build :
    stage: build
    image: docker:latest
    allow_failure : true
    script:
        - cd Dashboard
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -f Dockerfile_dashboard -t $CI_REGISTRY_IMAGE/python_with_dashboard_minicube .
        - docker push $CI_REGISTRY_IMAGE/python_with_dashboard_minicube
    only:
        changes:
            - Dashboard/**/*
        refs:
            - minicube
        except:
            - master



#################################################################################################################
#                                                  TEST                                                         #
#################################################################################################################



#################################################################################################################
#                                                  QUALITY                                                      #
#################################################################################################################
code_quality_job:
  stage: quality
  image: docker:stable
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - mkdir codequality-results
    - docker run
        --env CODECLIMATE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        --volume /tmp/cc:/tmp/cc
        codeclimate/codeclimate analyze -f html > ./codequality-results/index.html
  artifacts:
    paths:
      - codequality-results/

